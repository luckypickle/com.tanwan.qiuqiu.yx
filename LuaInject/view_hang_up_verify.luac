local BasePopLayer = require("ui.base.base_pop_layer")
local ViewHangUpVerify = class("ViewHangUpVerify", BasePopLayer)

local HangUpData = require("module.pto_data.hang_up_data")

local LEVEL_MIN = 5
local OPTIONS_NUM = 4

local RES = {
    [1] = "sprite/verify/verify_option_normal.png",
    [2] = "sprite/verify/verify_option_select.png",
}

HangUpData.ins = nil

function ViewHangUpVerify:initCfg()
    self.csbPath = "csb/view_node/view_hang_up_verify.csb"
    self.uniqueName = "ViewHangUpVerify"
    self.isInitAllWidget = true
    self.isTouchOutSideClose = false
end

function ViewHangUpVerify:initView()
end

function ViewHangUpVerify:initEvent()
    gUITool.registerButton(self.imgbtnOK, handler(self, self.onBtnOK))
    
    for i = 1, OPTIONS_NUM do
        gUITool.registerButton(self["imgbtnOption" .. i], function () self:onBtnClick(i) end)
    end

    self:updateView()
end

function ViewHangUpVerify:onBtnOK()
    local answerList = {}
    for k, v in pairs(self.curIndex) do
        local answer = self.options[v]
        if answer then
            table.insert(answerList, answer)
        end
    end

    HangUpData.reqHangUpVerify(answerList)

    self:setGrey(true)
end
function ViewHangUpVerify:onOkBtn(answerList)
	HangUpData.reqHangUpVerify(answerList)
end
function ViewHangUpVerify:onBtnClick(index)
    if self.isCountDown then return end

    if HangUpData.isSingle() then
        if self.curIndex[index] then return end

        self.curIndex = {}
        self.curIndex[index] = index
    else
        if self.curIndex[index] then
            self.curIndex[index] = nil 
        else
            self.curIndex[index] = index
        end
    end

    for i = 1, OPTIONS_NUM do
        if self.curIndex[i] then
            self["imgbtnOption" .. i]:loadTexture(RES[2])
        else
            self["imgbtnOption" .. i]:loadTexture(RES[1])
        end
    end

    local selectNum = table.nums(self.curIndex)
    self:setGrey(selectNum == 0)
end

function ViewHangUpVerify:updateView()
    self.curIndex = {}
    self.question = HangUpData.getHnagUpQuestion()
    self.options = HangUpData.getHnagUpOptions()

    for i, v in ipairs(self.options) do
        self.balls[i]:setDBType(v)
    end
    self.textQuestion:setString(self.question)

    for i = 1, OPTIONS_NUM do
        self["imgbtnOption" .. i]:loadTexture(RES[1])
        self["spCheck" .. i]:setVisible(false)
    end
    self.spTipsDi:setVisible(false)
    
    self:setGrey(true)
	

    local question_list = {}
    question_list['（多选题）下方哪些球球不能攻击怪物?'] = {10, 11, 14, 29, 41, 49, 56}
    question_list['（单选题）下方哪个球球属于稀有球球?'] = {10, 11, 12, 13, 14, 15, 16, 46}
    question_list['（多选题）下方哪些球球属于攻击类球球?'] = {1, 2, 3, 4, 6, 7, 8, 13, 15, 17, 19, 22, 24, 26, 28, 34, 37, 38, 45, 46, 47, 50, 52, 54, 55, 59, 63, 65, 66, 68}
    question_list['（多选题）下方哪些球球技能可以间接或直接对怪物造成减速效果?'] = {5, 31, 43, 56}
    question_list['（多选题）下方哪些球球属于普通球球?'] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 1000}
    question_list['（单选题）下方哪个球球攻击目标不是前边的?'] = {4, 6, 7, 10, 11, 12, 13, 14, 17, 18, 21, 23, 29, 37, 41, 42, 43, 46, 48, 49, 56, 58, 60, 63, 1000}
    question_list['（多选题）下方哪些球球属于控制类球球?'] = {4, 5, 9, 13, 18, 21, 23, 31, 48, 51, 53, 57, 64, 1000}
    question_list['（单选题）下方哪个球球的技能具有秒杀普通怪物的能力?'] = {17, 29}
    question_list['（多选题）下方哪些球球不属于传说球球?'] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 45, 46, 1000}
    question_list['（多选题）下方哪些球球技能可以干扰对手的球球?'] = {57, 64, 41, 35, 51, 53}
    question_list['（单选题）下方哪个球球属于攻击类球球?'] = {1, 2, 3, 4, 6, 7, 8, 13, 15, 17, 19, 22, 24, 26, 28, 34, 37, 38, 45, 46, 47, 50, 52, 54, 55, 59, 63, 65, 66, 68}
    question_list['（单选题）下方哪个球球属于史诗球球?'] = {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 45}
    question_list['（多选题）下方哪些球球属于辅助类球球?'] = {10, 11, 14, 16, 20, 23, 25, 29, 32, 39, 44, 49, 56, 67}
    question_list['（多选题）下方哪些球球技能可以带来额外SP?'] = {10, 15, 16, 23, 40, 58, 61}
    question_list['（单选题）下方哪个球球没有攻击速度?'] = {10, 11, 14, 29, 41, 49, 56, 1000}
    question_list['（单选题）下方那个球球攻击目标是随机的?'] = {4, 7, 13, 17, 18, 21, 23, 37, 43, 46, 48, 58, 63}
    question_list['（单选题）以下哪个球球能够增加周围球球的攻击速度?'] = {11, 49}
    question_list['（单选题）下方哪个球球技能可以间接或直接对怪物造成减速效果?'] = {5, 31, 43, 56}
    question_list['（单选题）下方哪个球球不属于传说球球?'] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 45, 46, 1000}
    question_list['（多选题）下方哪些球球能够增加周围球球的攻击速度?'] = {11, 49}
    question_list['（单选题）下方哪个球球可在路线上召唤生成物?'] = {12, 30, 42, 43, 40, 60}
    question_list['（单选题）下方哪个球球属于传说球球?'] = {27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70}
    question_list['（多选题）下方哪些球球属于稀有球球?'] = {10, 11, 12, 13, 14, 15, 16, 46}
    question_list['（多选题）下方哪些球球的技能具有秒杀普通怪物的能力?'] = {17, 29}
    question_list['（单选题）下方哪个球球属于召唤类球球?'] = {12, 30, 42, 43, 58, 60}
    question_list['（多选题）下方哪些球球属于传说球球?'] = {27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70}
    question_list['（单选题）下方哪个球球属于普通球球?'] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 1000}
    question_list['（单选题）下方哪个球球技能可以干扰对手的球球?'] = {57, 64, 41, 35, 51, 53}
    question_list['（多选题）下方哪些球球没有攻击速度?'] = {10, 11, 14, 29, 41, 49, 56, 1000}
    question_list['（单选题）下方哪个球球属于控制类球球?'] = {4, 5, 9, 13, 18, 21, 23, 31, 48, 51, 53, 57, 64, 1000}
    question_str = self.question
    options =self.options
    local answerList = {}
	
    for k,v in pairs(question_list) do
        if k == 	question_str then 
            for oi,os in ipairs(options) do 
                for i,s in ipairs(v) do 
                    if s == os then
                        table.insert(answerList,os)
                        break
                        end
                end
                end
            
            end
    end
    local answer = answerList[1]
        if not answer then

            table.insert(answerList,  self.options[1])
        end
    HangUpData.reqHangUpVerify(answerList)
end

function ViewHangUpVerify:updateResult()
    if HangUpData.isCorrect() then
        self:popDown()
    else
        local answerList = HangUpData.getHnagUpAnswer()
        for i = 1, OPTIONS_NUM do
            local answer = self.options[i]
            if not self:isNewbie() and table.indexof(answerList, answer) then
                self["spCheck" .. i]:setVisible(true)
                self["spCheck" .. i]:setTexture("sprite/activity/answer/answer_correct.png")
            else
                if self.curIndex[i] then
                    self["spCheck" .. i]:setVisible(true)
                    self["spCheck" .. i]:setTexture("sprite/activity/answer/answer_wrong.png")
                end
            end
        end
        self.spTipsDi:setVisible(true)

        if not self.isCountDown then
            self.isCountDown = true
            local errorTips = T("错误!(%ss)")
            if self:isNewbie() then
                errorTips = T("答错啦，请重新选择吧(%ss)")
            end
            gTimeTool.secondDownCount(self.textError, 3, errorTips, function()
                self.isCountDown = false
                self:updateView()
            end)
        end
    end
end

function ViewHangUpVerify:setGrey(bool)
    self.imgbtnOK:setEnable(not bool)
    self.textOK:setTextColor(bool and gColor.TEXT_GRAY or gColor.TEXT_NORMAL)
end

function ViewHangUpVerify:isNewbie()
    return gUser:getGrade() <= LEVEL_MIN
end

function ViewHangUpVerify:regEvent()
    -- HangUpData:regPtoCallBack("rpc_client_hang_up", self.updateView, self)
    HangUpData:regPtoCallBack("rpc_client_hang_up_verify", self.updateResult, self)
end

function ViewHangUpVerify:unRegEvent()
    -- HangUpData:unRegPtoCallBack("rpc_client_hang_up", self.updateView)
    HangUpData:unRegPtoCallBack("rpc_client_hang_up_verify", self.updateResult)
end

function ViewHangUpVerify:getIns()
    return ViewHangUpVerify.ins
end

function ViewHangUpVerify:onEnter()
    ViewHangUpVerify.super.onEnter(self)
    ViewHangUpVerify.ins = self

end

function ViewHangUpVerify:onExit()
    ViewHangUpVerify.super.onExit(self)
    ViewHangUpVerify.ins = nil
end

function ViewHangUpVerify.open()
    local layer = ViewHangUpVerify.new()
    layer:popUp()

    return layer
end

return ViewHangUpVerify